const express = require("express");
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const dotenv = require("dotenv");

dotenv.config();
const app = express();
app.use(express.json());
app.use(cors());

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const UserSchema = new mongoose.Schema({
  username: String,
  email: String,
  password: String,
});

const HabitSchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,
  name: String,
  streak: { type: Number, default: 0 },
  lastCompleted: Date,
});

const User = mongoose.model("User", UserSchema);
const Habit = mongoose.model("Habit", HabitSchema);

// Registro de usuario
app.post("/register", async (req, res) => {
  const { username, email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ username, email, password: hashedPassword });
  await user.save();
  res.status(201).json({ message: "Usuario registrado" });
});

// Login de usuario
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({ message: "Credenciales inválidas" });
  }
  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
    expiresIn: "1d",
  });
  res.json({ token });
});

// Middleware para autenticación
const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Acceso denegado" });
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return res.status(403).json({ message: "Token inválido" });
    req.userId = decoded.userId;
    next();
  });
};

// Obtener hábitos del usuario
app.get("/habits", authMiddleware, async (req, res) => {
  const habits = await Habit.find({ userId: req.userId });
  res.json(habits);
});

// Marcar hábito como completado
app.post("/habits/:id/done", authMiddleware, async (req, res) => {
  const habit = await Habit.findById(req.params.id);
  if (!habit) return res.status(404).json({ message: "Hábito no encontrado" });
  
  const today = new Date();
  if (habit.lastCompleted) {
    const lastCompleted = new Date(habit.lastCompleted);
    const difference = Math.floor((today - lastCompleted) / (1000 * 60 * 60 * 24));
    if (difference === 1) {
      habit.streak += 1;
    } else if (difference > 1) {
      habit.streak = 1;
    }
  } else {
    habit.streak = 1;
  }
  habit.lastCompleted = today;
  await habit.save();
  res.json(habit);
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Servidor corriendo en puerto ${PORT}`));
